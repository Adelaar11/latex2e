This is a generated file for the l3build validation system.
Don't change this file in any respect.
! Undefined control sequence.
<argument> \::error 
                    ! hooks: Empty code label on line .... Using `top-level' ...
l. ...\testme{top-level}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.
! Undefined control sequence.
<argument> \::error 
                    ! hooks: Empty code label on line .... Using `top-level' ...
l. ...\testme{top-level}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.
The hook 'foo':
 Code chunks:
    top-level -> top-leveltop-level
    . -> top-level
    .. -> ..
    ../ -> ../
    / -> /
    // -> //
    top-level/ -> top-level/
    /./ -> /./
    .x -> .x
    /.x -> /.x
    .x/ -> .x/
    top-level/foo -> top-level/foo
    top-level/foo/ -> top-level/foo/
    /./foo -> /./foo
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order:
    top-level, ., .., ../, /, //, top-level/, /./, .x, /.x, .x/, top-level/foo, top-level/foo/, /./foo
! Undefined control sequence.
<argument> \::error 
                    ! hooks: Empty code label on line .... Using `top-level' ...
l. ...  \testme{pkg}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.
! Undefined control sequence.
<argument> \::error 
                    ! hooks: Empty code label on line .... Using `top-level' ...
l. ...  \testme{pkg}
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.
The hook 'foo':
 Code chunks:
    top-level -> top-leveltop-level
    pkg -> pkg
    .. -> ..
    ../ -> ../
    / -> /
    // -> //
    pkg/ -> pkg/
    /./ -> /./
    .x -> .x
    /.x -> /.x
    .x/ -> .x/
    pkg/foo -> pkg/foo
    pkg/foo/ -> pkg/foo/
    /./foo -> /./foo
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order:
    top-level, pkg, .., ../, /, //, pkg/, /./, .x, /.x, .x/, pkg/foo, pkg/foo/, /./foo
The hook 'foo':
 Code chunks:
    top-level/foo -> top-level/foo
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order:
    top-level/foo
(lthooks-024-pkgA.sty
The hook 'foo':
 Code chunks:
    pkgA/foo -> pkgA/foo
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order:
    pkgA/foo
(lthooks-024-pkgB.sty
The hook 'foo':
 Code chunks:
    lthooks-024-pkgB/foo -> lthooks-024-pkgB/foo
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order:
    lthooks-024-pkgB/foo
(lthooks-024-pkgC.sty
The hook 'foo':
 Code chunks:
    pkgC/foo -> pkgC/foo
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order:
    pkgC/foo
)
The hook 'foo':
 Code chunks:
    lthooks-024-pkgB/foo -> lthooks-024-pkgB/foo
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order:
    lthooks-024-pkgB/foo
)
The hook 'foo':
 Code chunks:
    pkgA/foo -> pkgA/foo
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order:
    pkgA/foo
)
The hook 'foo':
 Code chunks:
    top-level/foo -> top-level/foo
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order:
    top-level/foo
The hook 'foo':
 Code chunks:
    my-document/foo -> my-document/foo
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order:
    my-document/foo
(lthooks-024-pkgA.sty
The hook 'foo':
 Code chunks:
    pkgA/foo -> pkgA/foo
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order:
    pkgA/foo
(lthooks-024-pkgB.sty
The hook 'foo':
 Code chunks:
    lthooks-024-pkgB/foo -> lthooks-024-pkgB/foo
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order:
    lthooks-024-pkgB/foo
(lthooks-024-pkgC.sty
The hook 'foo':
 Code chunks:
    pkgC/foo -> pkgC/foo
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order:
    pkgC/foo
)
The hook 'foo':
 Code chunks:
    lthooks-024-pkgB/foo -> lthooks-024-pkgB/foo
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order:
    lthooks-024-pkgB/foo
)
The hook 'foo':
 Code chunks:
    pkgA/foo -> pkgA/foo
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order:
    pkgA/foo
)
The hook 'foo':
 Code chunks:
    my-document/foo -> my-document/foo
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order:
    my-document/foo
