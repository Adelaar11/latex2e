This is a generated file for the l3build validation system.
Don't change this file in any respect.
**** Add to hook xx (my1) on input line ... <- \typeout {A}
**** Add to hook xx (my1) on input line ... <- \typeout {A2}
**** Add to hook xx (my2) on input line ... <- \typeout {B}
**** Add to hook xx (my3) on input line ... <- \typeout {C}
**** Add to hook xx (my4) on input line ... <- \typeout {D}
**** Add to hook xx (my2) on input line ... <- \typeout {B2}
Update code for hook 'xx' on input line ...:
  normal rule my4|my2: < found
Code labels for sorting:
 my1, my2, my3 and my4
Data structure for label rules:
 my1 = 0 -> 
 my2 = 1 -> 
 my3 = 0 -> 
 my4 = 0 -> my2
Handled code for my1
Handled code for my3
Handled code for my4
Handled code for my2
A
A2
C
D
B
B2
The hook 'xx':
 Code chunks:
    my1 -> \typeout {A}\typeout {A2}
    my2 -> \typeout {B}\typeout {B2}
    my3 -> \typeout {C}
    my4 -> \typeout {D}
 Extra code next invocation:
    ---
 Rules:
    my4|my2 with relation <
 Execution order (after applying rules):
    my1, my3, my4, my2
Expected output: my1 my3 my4 my2
**** Add to hook yy (my1) on input line ... <- \typeout {A}
**** Add to hook yy (my1) on input line ... <- \typeout {A2}
**** Add to hook yy (my2) on input line ... <- \typeout {B}
**** Add to hook yy (my3) on input line ... <- \typeout {C}
**** Add to hook yy (my4) on input line ... <- \typeout {D}
**** Add to hook yy (my2) on input line ... <- \typeout {B2}
**** Add to hook yy (my5) on input line ... <- \typeout {C alternate}
Update code for hook 'yy' on input line ...:
  normal rule my4|my2: > found
  normal rule my5|my3: -> found
---> Drop 'my3' code from \g__hook_yy_code_prop because of 'my5'
Code labels for sorting:
 my1, my2, my3, my4 and my5
Data structure for label rules:
 my1 = 0 -> 
 my2 = 1 -> 
 my3 = 0 -> 
 my4 = 0 -> my2
 my5 = 0 -> 
Handled code for my1
Handled code for my3
Handled code for my4
Handled code for my5
Handled code for my2
B
B2
C alternate
D
A
A2
The hook 'yy':
 Code chunks:
    my1 -> \typeout {A}\typeout {A2}
    my2 -> \typeout {B}\typeout {B2}
    my3 -> \typeout {C}
    my4 -> \typeout {D}
    my5 -> \typeout {C alternate}
 Extra code next invocation:
    ---
 Rules:
    my2|my4 with relation <
    my5|my3 with relation ->
 Execution order (after reversal and applying rules):
    my2, my5, my4, my3, my1
Expected output: my2, my5, my4, my3, my1
**** Add to hook env/quote/before (top-level) on input line ... <- \typeout {before A}
**** Add to hook env/quote/after (top-level) on input line ... <- \typeout {after A}
**** Add to hook env/quote/before (my1) on input line ... <- \typeout {before B}
**** Add to hook env/quote/after (my1) on input line ... <- \typeout {after B}
**** Add to hook env/quote/before (my2) on input line ... <- \typeout {before C}
**** Add to hook env/quote/after (my2) on input line ... <- \typeout {after C}
**** Add to hook env/quote/before (my3) on input line ... <- \typeout {before D}
**** Add to hook env/quote/after (my3) on input line ... <- \typeout {after D}
Update code for hook 'env/quote/before' on input line ...:
 default rule top-level|my1: > found
 default rule my3|my2: < found
Code labels for sorting:
 top-level, my1, my2 and my3
Data structure for label rules:
 top-level = 1 -> 
 my1 = 0 -> top-level
 my2 = 1 -> 
 my3 = 0 -> my2
Handled code for my1
Handled code for my3
Handled code for top-level
Handled code for my2
before B
before D
before A
before C
The hook 'env/quote/before':
 Code chunks:
    top-level -> \typeout {before A}
    my1 -> \typeout {before B}
    my2 -> \typeout {before C}
    my3 -> \typeout {before D}
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order:
    my1, my3, top-level, my2
Expected output: my1, my3, top-level, my2
Update code for hook 'env/quote/after' on input line ...:
 default rule top-level|my1: > found
 default rule my3|my2: < found
Code labels for sorting:
 top-level, my1, my2 and my3
Data structure for label rules:
 top-level = 1 -> 
 my1 = 0 -> top-level
 my2 = 1 -> 
 my3 = 0 -> my2
Handled code for my1
Handled code for my3
Handled code for top-level
Handled code for my2
after C
after A
after D
after B
The hook 'env/quote/after':
 Code chunks:
    top-level -> \typeout {after A}
    my1 -> \typeout {after B}
    my2 -> \typeout {after C}
    my3 -> \typeout {after D}
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order (after reversal):
    my2, top-level, my3, my1
Expected output: my2, top-level, my3, my1
**** Add to hook Start (zz1) on input line ... <- \typeout {A}
**** Add to hook Start (zz2) on input line ... <- \typeout {B}
**** Add to hook Stop (zz1) on input line ... <- \typeout {A}
**** Add to hook Stop (zz2) on input line ... <- \typeout {B}
**** Add to hook Stop (zz3) on input line ... <- \typeout {C}
**** Add to hook Stop (zz4) on input line ... <- \typeout {D}
Update code for hook 'Start' on input line ...:
Code labels for sorting:
 zz1 and zz2
Data structure for label rules:
 zz1 = 0 -> 
 zz2 = 0 -> 
Handled code for zz1
Handled code for zz2
A
B
Update code for hook 'Stop' on input line ...:
Code labels for sorting:
 zz1, zz2, zz3 and zz4
Data structure for label rules:
 zz1 = 0 -> 
 zz2 = 0 -> 
 zz3 = 0 -> 
 zz4 = 0 -> 
Handled code for zz1
Handled code for zz2
Handled code for zz3
Handled code for zz4
D
C
B
A
The hook 'Start':
 Code chunks:
    zz1 -> \typeout {A}
    zz2 -> \typeout {B}
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order:
    zz1, zz2
The hook 'Stop':
 Code chunks:
    zz1 -> \typeout {A}
    zz2 -> \typeout {B}
    zz3 -> \typeout {C}
    zz4 -> \typeout {D}
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order (after reversal):
    zz4, zz3, zz2, zz1
The hook 'Stop':
 Code chunks:
    zz1 -> \typeout {A}
    zz2 -> \typeout {B}
    zz3 -> \typeout {C}
    zz4 -> \typeout {D}
 Extra code next invocation:
    ---
 Rules:
    zz3|zz4 with relation <
 Execution order (after reversal and applying rules):
    zz4, zz3, zz2, zz1
The hook 'Start':
 Code chunks:
    ---
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order:
    not set yet
The hook 'Stop':
 Code chunks:
    ---
 Extra code next invocation:
    ---
 Rules:
    zz3|zz4 with relation <
 Execution order (after reversal and applying rules):
    not set yet
**** Add to hook Start (one) on input line ... <- \typeout {begin A}
**** Add to hook Start (one) on input line ... <- \typeout {begin B}
**** Add to hook Start (one) on input line ... <- \typeout {begin C}
**** Add to hook Stop (one) on input line ... <- \typeout {end C}
**** Add to hook Stop (one) on input line ... <- \typeout {end B}
**** Add to hook Stop (one) on input line ... <- \typeout {end A}
Update code for hook 'Start' on input line ...:
Code labels for sorting:
 one
Data structure for label rules:
 one = 0 -> 
Handled code for one
begin A
begin B
begin C
Update code for hook 'Stop' on input line ...:
Code labels for sorting:
 one
Data structure for label rules:
 one = 0 -> 
Handled code for one
end C
end B
end A
The hook 'Start':
 Code chunks:
    one -> \typeout {begin A}\typeout {begin B}\typeout {begin C}
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order:
    one
The hook 'Stop':
 Code chunks:
    one -> \typeout {end C}\typeout {end B}\typeout {end A}
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order (after reversal):
    one
**** Add to hook Start (zz1) on input line ... <- \typeout {A}
**** Add to hook Start (zz2) on input line ... <- \typeout {B}
**** Add to hook Start (zz3) on input line ... <- \typeout {C}
**** Add to hook Stop (zz1) on input line ... <- \typeout {A}
**** Add to hook Stop (zz2) on input line ... <- \typeout {B}
**** Add to hook Stop (zz3) on input line ... <- \typeout {C}
Update code for hook 'Start' on input line ...:
 default rule zz2|zz1: < found
 default rule zz3|zz1: > found
Code labels for sorting:
 zz1, zz2 and zz3
Data structure for label rules:
 zz1 = 1 -> zz3
 zz2 = 0 -> zz1
 zz3 = 1 -> 
Handled code for zz2
Handled code for zz1
Handled code for zz3
B
A
C
Update code for hook 'Stop' on input line ...:
 default rule zz2|zz1: < found
 default rule zz3|zz1: > found
Code labels for sorting:
 zz1, zz2 and zz3
Data structure for label rules:
 zz1 = 1 -> zz3
 zz2 = 0 -> zz1
 zz3 = 1 -> 
Handled code for zz2
Handled code for zz1
Handled code for zz3
C
A
B
The hook 'Start':
 Code chunks:
    zz1 -> \typeout {A}
    zz2 -> \typeout {B}
    zz3 -> \typeout {C}
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order:
    zz2, zz1, zz3
The hook 'Stop':
 Code chunks:
    zz1 -> \typeout {A}
    zz2 -> \typeout {B}
    zz3 -> \typeout {C}
 Extra code next invocation:
    ---
 Rules:
    ---
 Execution order (after reversal):
    zz3, zz1, zz2
